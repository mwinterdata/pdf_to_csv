{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7c47da53",
   "metadata": {},
   "source": [
    "### 1. Run imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "437ceadb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import camelot\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import string"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1204dfd4",
   "metadata": {},
   "source": [
    "### 2. Enter desired file locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51427597",
   "metadata": {},
   "outputs": [],
   "source": [
    "# copy in current input pdf and desired output csv locations\n",
    "# make sure / rather than \\ , if \\  used can change to / or put r before string e.g.r\"\\computer\\file_location\\file\"\n",
    "\n",
    "input_pdf = \"/home/michael/jupyter_folder/lion_rock_2022_interim_report.pdf\"\n",
    "csv = \"/home/michael/jupyter_folder/lion_rock_2022_interim_report_input_7.csv\"\n",
    "csv_output = \"/home/michael/jupyter_folder/lion_rock_2022_interim_report_output_7.csv\"\n",
    "\n",
    "# input_pdf = \"/home/michael/jupyter_folder/2023 10q3.pdf\"\n",
    "# csv = \"/home/michael/jupyter_folder/20230626_input_test_3.csv\"\n",
    "# csv_output = \"/home/michael/jupyter_folder/20230626_output_test_3.csv\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "336fe61b",
   "metadata": {},
   "source": [
    "### 3. Read in the pdf, assign each table to a dataframe, and export to csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e637d51",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# will result in 'IndexError: sequence index out of range' unless max_page_no is changed to correct value, but runs fine...\n",
    "# ... and exports to csv regardless will only error out after all pages uploaded so feel free to leave at 200\n",
    "max_page_no = 200\n",
    "\n",
    "for i in range(1,max_page_no):\n",
    "    page = str(i)\n",
    "    tables = camelot.read_pdf(input_pdf, flavor='stream', pages=page, table_areas=['0,780,566,0'], encoding='utf-8')\n",
    "\n",
    "    no_tables = tables.n\n",
    "    \n",
    "    # print below optional just shows camelot is doing what it is supposed to, while running table areas at ['0,780,566,0'] should be one table per page and every page picked up\n",
    "    print('Page number:', i, ' Number of tables:', no_tables)\n",
    "    \n",
    "    for j in range(1, no_tables + 1):\n",
    "        df = tables[j-1].df\n",
    "        \n",
    "#         # below if/else removes a large amount of excess text not in tables from pdf, can be hashed/unhashed and easily changed as required\n",
    "#         char_max = 30\n",
    "#         if len(df.columns) > 2:\n",
    "#             df = df[~(df[0].astype(str).str.len().gt(char_max) | df[1].astype(str).str.len().gt(char_max)| df[2].astype(str).str.len().gt(char_max))]\n",
    "#         if len(df.columns) > 1:\n",
    "#             df = df[~(df[0].astype(str).str.len().gt(char_max) | df[1].astype(str).str.len().gt(char_max))]\n",
    "#         else:\n",
    "#             df = df[~df[0].astype(str).str.len().gt(char_max)]\n",
    "\n",
    "        # Create an empty row DataFrame with the same columns as df\n",
    "        empty_row = pd.DataFrame([[''] * len(df.columns)], columns=df.columns)\n",
    "        # Concatenate df and empty_rows (as many as desired have put 3 as standard)\n",
    "        df = pd.concat([df, empty_row, empty_row, empty_row], ignore_index=True)\n",
    "        \n",
    "\n",
    "        df.to_csv(csv, mode='a', index=False, header=False)\n",
    "\n",
    "### results may include error message shown below, this is caused by large blocks of text with words at a distance apart that\n",
    "### camelot is not sure how to treat them, as long as it keeps running after (it should), this is completely fine\n",
    "    # C:\\Users\\winte\\anaconda3\\lib\\site-packages\\camelot\\parsers\\stream.py:365: UserWarning: No tables found in table area 1\n",
    "    # warnings.warn(f\"No tables found in table area {table_idx + 1}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dacbe61f",
   "metadata": {},
   "source": [
    "### 4. Replace em dashes (—) with 0s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c65467f",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_csv = open(csv, \"r\")\n",
    "\n",
    "# test em dash replace\n",
    "# input_csv = ''.join([i for i in input_csv]) .replace(b'\\xe2\\x80\\x94'.decode('utf-8'), 'TESTING TESTING')\n",
    "\n",
    "# original em dash replace \n",
    "input_csv = ''.join([i for i in input_csv]) .replace(\"–\", \"0\")\n",
    "\n",
    "# added em dash replace\n",
    "input_csv = ''.join([i for i in input_csv]) .replace(\"—\", \"0\")\n",
    "\n",
    "# optional line below to also remove many undesired line breaks in file\n",
    "input_csv = ''.join([i for i in input_csv]) .replace(\"$\\n\", \"$\")\n",
    "\n",
    "\n",
    "output_csv = open(csv_output,\"w\")\n",
    "output_csv.writelines(input_csv)\n",
    "output_csv.close()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc13a7d3",
   "metadata": {},
   "source": [
    "### 5. (optional) If you are not getting all the information from each page as required, experiment adjusting table areas below and entering new table areas desired above in 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b5aea1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "tables = camelot.read_pdf(input_pdf, flavor='stream', pages='1', table_areas=['0,780,566,0'])\n",
    "\n",
    "camelot.plot(tables[0], kind='contour').show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
